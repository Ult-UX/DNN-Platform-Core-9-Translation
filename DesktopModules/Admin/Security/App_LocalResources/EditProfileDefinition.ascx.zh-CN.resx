<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element msdata:IsDataSet="true" name="root">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element minOccurs="0" name="value" type="xsd:string"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element minOccurs="0" msdata:Ordinal="1" name="value" type="xsd:string"/>
                <xsd:element minOccurs="0" msdata:Ordinal="2" name="comment" type="xsd:string"/>
              </xsd:sequence>
              <xsd:attribute msdata:Ordinal="1" name="name" type="xsd:string" use="required"/>
              <xsd:attribute msdata:Ordinal="3" name="type" type="xsd:string"/>
              <xsd:attribute msdata:Ordinal="4" name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element minOccurs="0" msdata:Ordinal="1" name="value" type="xsd:string"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EditProperty.Text" xml:space="preserve">
    <value>编辑配置文件属性定义</value>
  </data>
  <data name="AddContent.Action" xml:space="preserve">
    <value>添加新配置文件属性</value>
  </data>
  <data name="ProfilePropertyDefinition_DataType.Text" xml:space="preserve">
    <value>数据类型:</value>
  </data>
  <data name="ProfilePropertyDefinition_DataType.Help" xml:space="preserve">
    <value>选择该字段的数据类型。</value>
  </data>
  <data name="ProfilePropertyDefinition_DefaultValue.Text" xml:space="preserve">
    <value>默认值:</value>
  </data>
  <data name="ProfilePropertyDefinition_DefaultValue.Help" xml:space="preserve">
    <value>可以为此属性提供默认值。</value>
  </data>
  <data name="ProfilePropertyDefinition_PropertyCategory.Text" xml:space="preserve">
    <value>属性类别:</value>
  </data>
  <data name="ProfilePropertyDefinition_PropertyCategory.Help" xml:space="preserve">
    <value>输入此属性的类别。这将允许相关属性在向用户显示时进行分组。</value>
  </data>
  <data name="ProfilePropertyDefinition_PropertyName.Text" xml:space="preserve">
    <value>属性名称:</value>
  </data>
  <data name="ProfilePropertyDefinition_PropertyName.Help" xml:space="preserve">
    <value>输入属性的名称。</value>
  </data>
  <data name="ProfilePropertyDefinition_ValidationExpression.Text" xml:space="preserve">
    <value>验证表达式:</value>
  </data>
  <data name="ProfilePropertyDefinition_ValidationExpression.Help" xml:space="preserve">
    <value>您可以提供正则表达式来验证为此属性输入的数据。</value>
  </data>
  <data name="ProfilePropertyDefinition_ViewOrder.Text" xml:space="preserve">
    <value>查看订单:</value>
  </data>
  <data name="ProfilePropertyDefinition_ViewOrder.Help" xml:space="preserve">
    <value>输入一个数字以确定该财产的视图订单或留空以添加。</value>
  </data>
  <data name="ProfilePropertyDefinition_Visible.Text" xml:space="preserve">
    <value>可见:</value>
  </data>
  <data name="ProfilePropertyDefinition_Visible.Help" xml:space="preserve">
    <value>如果用户可以查看和编辑此属性，或者只有管理员才能看到该属性，请选中此框。</value>
  </data>
  <data name="ProfilePropertyDefinition_Required.Text" xml:space="preserve">
    <value>需要:</value>
  </data>
  <data name="ProfilePropertyDefinition_Required.Help" xml:space="preserve">
    <value>设置是否需要此属性。</value>
  </data>
  <data name="ProfilePropertyDefinition_Length.Text" xml:space="preserve">
    <value>长度:</value>
  </data>
  <data name="ProfilePropertyDefinition_Length.Help" xml:space="preserve">
    <value>输入此属性的最大长度。这只适用于特定的数据类型。</value>
  </data>
  <data name="DuplicateName.Text" xml:space="preserve">
    <value>此属性已存在。属性名称必须是唯一的。请为此属性选择一个不同的名称。</value>
  </data>
  <data name="ProfilePropertyDefinition_PropertyCategory.Required" xml:space="preserve">
    <value>该类别是必需的。</value>
  </data>
  <data name="ProfilePropertyDefinition_PropertyName.Required" xml:space="preserve">
    <value>属性名称是必需的。</value>
  </data>
  <data name="plCategoryName.Help" xml:space="preserve">
    <value>以所选语言输入类别名称的文本。</value>
  </data>
  <data name="plCategoryName.Text" xml:space="preserve">
    <value>分类名称:</value>
  </data>
  <data name="plLocales.Help" xml:space="preserve">
    <value>选择语言。</value>
  </data>
  <data name="plLocales.Text" xml:space="preserve">
    <value>选择语言:</value>
  </data>
  <data name="plPropertyHelp.Help" xml:space="preserve">
    <value>以所选语言输入此属性的帮助。</value>
  </data>
  <data name="plPropertyHelp.Text" xml:space="preserve">
    <value>属性帮助:</value>
  </data>
  <data name="plPropertyName.Help" xml:space="preserve">
    <value>以所选语言输入属性名称的文本。</value>
  </data>
  <data name="plPropertyName.Text" xml:space="preserve">
    <value>属性名称:</value>
  </data>
  <data name="cmdCreate.Text" xml:space="preserve">
    <value>创建新的属性</value>
  </data>
  <data name="cmdUpdate.Text" xml:space="preserve">
    <value>更新属性</value>
  </data>
  <data name="Introduction.Help" xml:space="preserve">
    <value>编辑配置文件属性定义的第一步是更新属性的详细信息。对此页面上的字段进行所需的任何更改，然后单击下一步以保存更改，然后继续下一步。</value>
  </data>
  <data name="Introduction.Title" xml:space="preserve">
    <value>编辑房产详情</value>
  </data>
  <data name="List.Help" xml:space="preserve">
    <value>物业详情已更新。该属性是一个List类型属性。下一步是定义列表条目。</value>
  </data>
  <data name="List.Title" xml:space="preserve">
    <value>管理列表条目</value>
  </data>
  <data name="Introduction_Add.Help" xml:space="preserve">
    <value>设置配置文件属性定义的第一步是定义属性的详细信息。在此页面输入详细信息，然后点击"下一步"创建属性定义。 &lt;b&gt;注意:&lt;/b&gt;标有红色星号的所有字段均为必填项。</value>
  </data>
  <data name="Introduction_Add.Title" xml:space="preserve">
    <value>添加新房地产详情</value>
  </data>
  <data name="Localization.Help" xml:space="preserve">
    <value>下一步是管理此属性的本地化。选择要更新的语言，添加新文本或修改现有文本，然后单击更新。</value>
  </data>
  <data name="Localization.Title" xml:space="preserve">
    <value>管理本地化</value>
  </data>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>返回到配置文件属性列表</value>
  </data>
  <data name="ProfilePropertyDefinition_PropertyName.Validation" xml:space="preserve">
    <value>属性名称不能包含空格。</value>
  </data>
  <data name="plPropertyRequired.Help" xml:space="preserve">
    <value>当属性为Required但不存在时，输入错误消息以显示此字段。</value>
  </data>
  <data name="plPropertyRequired.Text" xml:space="preserve">
    <value>必需的错误消息:</value>
  </data>
  <data name="plPropertyValidation.Help" xml:space="preserve">
    <value>输入错误消息以在属性未通过正则表达式验证时显示此字段。</value>
  </data>
  <data name="plPropertyValidation.Text" xml:space="preserve">
    <value>验证错误消息:</value>
  </data>
  <data name="RequiredTextBox.Text" xml:space="preserve">
    <value>如果您使用TextBox字段，则所需的长度必须大于0。</value>
  </data>
  <data name="AddProperty.Text" xml:space="preserve">
    <value>添加资料属性定义</value>
  </data>
  <data name="ProfilePropertyDefinition_DefaultVisibility.Help" xml:space="preserve">
    <value>您可以设置配置文件属性的默认可见性。这是可见性的初始值，如果用户在编辑他们的配置文件时没有对其进行修改，则适用该值。</value>
  </data>
  <data name="ProfilePropertyDefinition_DefaultVisibility.Text" xml:space="preserve">
    <value>默认可见性:</value>
  </data>
  <data name="ProfilePropertyDefinition_ReadOnly.Help" xml:space="preserve">
    <value>只读配置文件属性可以由管理员编辑，但对用户是只读的。</value>
  </data>
  <data name="ProfilePropertyDefinition_ReadOnly.Text" xml:space="preserve">
    <value>只读：</value>
  </data>
  <data name="Cancel.Text" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="Return.Text" xml:space="preserve">
    <value>更新</value>
  </data>
  <data name="valPropertyName.ErrorMessage" xml:space="preserve">
    <value>您需要输入此属性的名称。</value>
  </data>
</root>
