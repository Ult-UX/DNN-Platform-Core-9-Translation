<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Containers.Text" xml:space="preserve">
    <value>容器</value>
  </data>
  <data name="Layouts.Text" xml:space="preserve">
    <value>布局</value>
  </data>
  <data name="nav_Themes.Text" xml:space="preserve">
    <value>主题</value>
  </data>
  <data name="Settings.Text" xml:space="preserve">
    <value>设置</value>
  </data>
  <data name="SiteTheme.Text" xml:space="preserve">
    <value>站点主题:</value>
  </data>
  <data name="Themes.Text" xml:space="preserve">
    <value>主题</value>
  </data>
  <data name="Apply.Text" xml:space="preserve">
    <value>应用</value>
  </data>
  <data name="Cancel.Text" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="Container.Text" xml:space="preserve">
    <value>容器</value>
  </data>
  <data name="EditThemeAttributes.Text" xml:space="preserve">
    <value>编辑主题属性</value>
  </data>
  <data name="File.Text" xml:space="preserve">
    <value>文件</value>
  </data>
  <data name="Layout.Text" xml:space="preserve">
    <value>布局</value>
  </data>
  <data name="Localized.Text" xml:space="preserve">
    <value>本地化</value>
  </data>
  <data name="ParseThemePackage.Text" xml:space="preserve">
    <value>解析主题包</value>
  </data>
  <data name="Portable.Text" xml:space="preserve">
    <value>可移植的</value>
  </data>
  <data name="SetEditContainer.Text" xml:space="preserve">
    <value>设置编辑容器</value>
  </data>
  <data name="SetEditLayout.Text" xml:space="preserve">
    <value>设置编辑布局</value>
  </data>
  <data name="SetSiteContainer.Text" xml:space="preserve">
    <value>设置网站容器</value>
  </data>
  <data name="SetSiteLayout.Text" xml:space="preserve">
    <value>设置网站布局</value>
  </data>
  <data name="Setting.Text" xml:space="preserve">
    <value>设置</value>
  </data>
  <data name="StatusEdit.Text" xml:space="preserve">
    <value>E</value>
  </data>
  <data name="StatusSite.Text" xml:space="preserve">
    <value>S</value>
  </data>
  <data name="Theme.Text" xml:space="preserve">
    <value>主题</value>
  </data>
  <data name="Token.Text" xml:space="preserve">
    <value>Token</value>
  </data>
  <data name="Value.Text" xml:space="preserve">
    <value>值</value>
  </data>
  <data name="RestoreTheme.Text" xml:space="preserve">
    <value>[ 恢复默认主题 ]</value>
  </data>
  <data name="Confirm.Text" xml:space="preserve">
    <value>确认</value>
  </data>
  <data name="RestoreThemeConfirm.Text" xml:space="preserve">
    <value>您确定要恢复默认主题吗?</value>
  </data>
  <data name="ApplyConfirm.Text" xml:space="preserve">
    <value>你确定你想要应用这个主题吗?</value>
  </data>
  <data name="DeleteConfirm.Text" xml:space="preserve">
    <value>你确定要删除这个主题吗?</value>
  </data>
  <data name="UsePackageUninstall.Text" xml:space="preserve">
    <value>这个主题是作为一个包安装的, 请转到扩展程序并从那里卸载它.</value>
  </data>
  <data name="SearchPlaceHolder.Text" xml:space="preserve">
    <value>搜索</value>
  </data>
  <data name="Successful.Text" xml:space="preserve">
    <value>操作完成!</value>
  </data>
  <data name="NoPermission.Text" xml:space="preserve">
    <value>您无权执行此操作.</value>
  </data>
  <data name="NoThemeFile.Text" xml:space="preserve">
    <value>此主题中不存在主题文件.</value>
  </data>
  <data name="ThemeNotFound.Text" xml:space="preserve">
    <value>无法找到特定的主题.</value>
  </data>
  <data name="NoneSpecified.Text" xml:space="preserve">
    <value>-- 选择 --</value>
  </data>
  <data name="ApplyTheme.Text" xml:space="preserve">
    <value>应用</value>
  </data>
  <data name="DeleteTheme.Text" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="PreviewTheme.Text" xml:space="preserve">
    <value>预览</value>
  </data>
  <data name="InstallTheme.Text" xml:space="preserve">
    <value>安装新主题</value>
  </data>
  <data name="BackToThemes.Text" xml:space="preserve">
    <value>返回主题</value>
  </data>
  <data name="GlobalThemes.Text" xml:space="preserve">
    <value>全局主题</value>
  </data>
  <data name="SiteThemes.Text" xml:space="preserve">
    <value>站点主题</value>
  </data>
  <data name="ThemeLevelAll.Text" xml:space="preserve">
    <value>全部主题</value>
  </data>
  <data name="ThemeLevelGlobal.Text" xml:space="preserve">
    <value>全局主题</value>
  </data>
  <data name="ThemeLevelSite.Text" xml:space="preserve">
    <value>站点主题</value>
  </data>
  <data name="ShowFilterLabel">
    <value>显示:</value>
  </data>
  <data name="NoThemes">
    <value>找不到主题.</value>
  </data>
  <data name="NoThemesMessage">
    <value>尝试调整搜索过滤器或将新主题安装到您的库中.</value>
  </data>
</root>