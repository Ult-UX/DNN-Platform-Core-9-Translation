<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element msdata:IsDataSet="true" name="root">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element minOccurs="0" name="value" type="xsd:string"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element minOccurs="0" msdata:Ordinal="1" name="value" type="xsd:string"/>
                <xsd:element minOccurs="0" msdata:Ordinal="2" name="comment" type="xsd:string"/>
              </xsd:sequence>
              <xsd:attribute msdata:Ordinal="1" name="name" type="xsd:string" use="required"/>
              <xsd:attribute msdata:Ordinal="3" name="type" type="xsd:string"/>
              <xsd:attribute msdata:Ordinal="4" name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element minOccurs="0" msdata:Ordinal="1" name="value" type="xsd:string"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cmdUpdate.Text" xml:space="preserve">
    <value>更新</value>
  </data>
  <data name="ControlTitle_viewsource.Text" xml:space="preserve">
    <value>查看来源</value>
  </data>
  <data name="plSource.Help" xml:space="preserve">
    <value>您可以在下面的文本框中查看文件的内容。如果你在本地机器上运行，那么你也可以编辑和修改源代码。</value>
  </data>
  <data name="plSource.Text" xml:space="preserve">
    <value>位置:</value>
  </data>
  <data name="SourceFile.Text" xml:space="preserve">
    <value>源文件 -  {0}</value>
  </data>
  <data name="plFile.Help" xml:space="preserve">
    <value>选择要查看其源的文件。</value>
  </data>
  <data name="plFile.Text" xml:space="preserve">
    <value>选择文件:</value>
  </data>
  <data name="NoFileTypeSelected.Text" xml:space="preserve">
    <value>在点击更新按钮之前，您必须选择一个文件类型进行编辑。</value>
  </data>
  <data name="plLanguage.Text" xml:space="preserve">
    <value>语言:</value>
  </data>
  <data name="plLanguage.Help" xml:space="preserve">
    <value>选择您的首选语言来开发模块。</value>
  </data>
  <data name="C#.Text" xml:space="preserve">
    <value>C＃</value>
  </data>
  <data name="VB.Text" xml:space="preserve">
    <value>Visual Basic</value>
  </data>
  <data name="plTemplate.Text" xml:space="preserve">
    <value>模板:</value>
  </data>
  <data name="plTemplate.Help" xml:space="preserve">
    <value>选择你喜欢的模块开发模板。模块开发模板存储在模块创建器模块文件夹内的模板子文件夹中。</value>
  </data>
  <data name="plControl.Text" xml:space="preserve">
    <value>控件名称:</value>
  </data>
  <data name="plControl.Help" xml:space="preserve">
    <value>模块控件的唯一名称。</value>
  </data>
  <data name="plType.Text" xml:space="preserve">
    <value>控件类型:</value>
  </data>
  <data name="plType.Help" xml:space="preserve">
    <value>选择控件的类型。</value>
  </data>
  <data name="cmdCreate.Text" xml:space="preserve">
    <value>创建</value>
  </data>
  <data name="ControlCreated.Text" xml:space="preserve">
    <value>该文件已成功创建。</value>
  </data>
  <data name="ControlUpdated.Text" xml:space="preserve">
    <value>该文件已成功更新。</value>
  </data>
  <data name="FolderNameInvalid.Text" xml:space="preserve">
    <value>为该模块标识的文件夹名称不存在。请在Host  -  Extensions中查看此模块的设置。</value>
  </data>
  <data name="AddControlError.Text" xml:space="preserve">
    <value>您必须选择一个模块模板并提供一个控件名称。</value>
  </data>
  <data name="cmdPackage.Text" xml:space="preserve">
    <value>创建包</value>
  </data>
  <data name="cmdConfigure.Text" xml:space="preserve">
    <value>配置</value>
  </data>
  <data name="Add.Text" xml:space="preserve">
    <value>加</value>
  </data>
  <data name="Edit.Text" xml:space="preserve">
    <value>编辑</value>
  </data>
  <data name="AddFile.Text" xml:space="preserve">
    <value>添加文件</value>
  </data>
  <data name="EditFile.Text" xml:space="preserve">
    <value>编辑文件</value>
  </data>
  <data name="Snippet.Text" xml:space="preserve">
    <value>代码片段</value>
  </data>
  <data name="cmdSave.Text" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="cmdSaveAs.Text" xml:space="preserve">
    <value>另存为</value>
  </data>
  <data name="DeleteSnippet.Text" xml:space="preserve">
    <value>删除代码段？</value>
  </data>
  <data name="View.Text" xml:space="preserve">
    <value>视图</value>
  </data>
</root>
